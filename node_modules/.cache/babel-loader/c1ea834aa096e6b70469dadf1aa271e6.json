{"ast":null,"code":"import _toConsumableArray from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Board)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      win: false\n    };\n    _this.cellList = [];\n    _this.extractedLetters = new Set();\n    _this.extractedNums = new Set();\n\n    _this.extractLetters = function () {\n      /* THIS FUNCTION EXTRACTS THE LETTERS FROM THE CELLLIST ARRAY */\n      _this.cellList.forEach(function (cell) {\n        // Loop through the 'cellList',\n        _this.extractedLetters.add(cell[0]); // & add a letter to the 'extractedLetters' Set,\n\n\n        _this.extractedNums.add(cell[1]); // & add a number to the 'extractedNums' Set\n\n      });\n\n      _this.extractedLetters = _toConsumableArray(_this.extractedLetters); // Convert the 'extractedLetters' Set to an Array\n\n      _this.extractedNums = _toConsumableArray(_this.extractedNums); // Convert the 'extractedNums' Set to an Array\n    };\n\n    _this.generateCells = function (char) {\n      return _toConsumableArray(Array(5)).map(function (x, i) {\n        var id = char + (i + 1);\n\n        _this.cellList.push(id);\n\n        return React.createElement(Cell, {\n          lightCoordinatess: _this.lightCoordinates,\n          id: id,\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      });\n    };\n\n    _this.lightCoordinates = function (uid) {\n      var up;\n\n      for (var i = 0; i < _this.extractedLetters.length; i++) {\n        if (uid[0] === _this.extractedLetters[0]) {\n          up = null;\n          break;\n        }\n\n        if (uid[0] === _this.extractedLetters[i]) {\n          up = _this.extractedLetters[i - 1] + uid[1];\n          break;\n        }\n      }\n\n      var down;\n\n      for (var _i = 0; _i < _this.extractedLetters.length; _i++) {\n        if (uid[0] === _this.extractedLetters[_this.extractedLetters.length - 1]) {\n          down = null;\n          break;\n        }\n\n        if (uid[0] === _this.extractedLetters[_i]) {\n          down = _this.extractedLetters[_i + 1] + uid[1];\n          break;\n        }\n      }\n\n      var left;\n\n      for (var _i2 = 0; _i2 < _this.extractedLetters.length; _i2++) {\n        if (uid[1] === \"1\") {\n          left = null;\n          break;\n        } else {\n          left = uid[0] + (uid[1] - 1);\n          break;\n        }\n      }\n\n      var right;\n\n      for (var _i3 = 0; _i3 < _this.extractedLetters.length; _i3++) {\n        if (uid[1] === _this.extractedNums[_this.extractedNums.length - 1]) {\n          right = null;\n          break;\n        } else {\n          right = uid[0] + (parseInt(uid[1]) + 1);\n          break;\n        }\n      }\n\n      return {\n        up: up,\n        right: right,\n        down: down,\n        left: left\n      };\n    };\n\n    _this.toggleLights = function (uid) {\n      var coordinates = _this.lightCoordinates(uid);\n    };\n\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        onClick: function onClick() {\n          return console.log(_this2.lightCoordinates(\"b2\"));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Lights Out\"), React.createElement(\"table\", {\n        className: \"Board-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.generateCells(\"a\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.generateCells(\"b\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.generateCells(\"c\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.generateCells(\"d\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.generateCells(\"e\")))));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","state","win","cellList","extractedLetters","Set","extractedNums","extractLetters","forEach","cell","add","generateCells","char","Array","map","x","i","id","push","lightCoordinates","uid","up","length","down","left","right","parseInt","toggleLights","coordinates","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  state = {\n    win: false,\n  }\n\n  cellList = [];\n  extractedLetters = new Set();\n  extractedNums = new Set();\n\n\n  extractLetters = () => {                                /* THIS FUNCTION EXTRACTS THE LETTERS FROM THE CELLLIST ARRAY */\n    \n    this.cellList.forEach((cell) => {                     // Loop through the 'cellList',\n      this.extractedLetters.add(cell[0]);                 // & add a letter to the 'extractedLetters' Set,\n      this.extractedNums.add(cell[1]);                    // & add a number to the 'extractedNums' Set\n    });\n\n    this.extractedLetters = [...this.extractedLetters];   // Convert the 'extractedLetters' Set to an Array\n    this.extractedNums = [...this.extractedNums];         // Convert the 'extractedNums' Set to an Array\n\n  }\n\n  generateCells = (char) => {\n    return [...Array(5)].map((x,i) => {\n      let id = char + (i + 1);\n      this.cellList.push(id);\n      return <Cell lightCoordinatess={this.lightCoordinates} id={id} key={id} />\n    });\n  }\n\n  lightCoordinates = (uid) => {\n\n    let up;\n    for(let i = 0; i < this.extractedLetters.length; i++){\n      if(uid[0] === this.extractedLetters[0]){\n        up = null;\n        break;\n      }\n      if(uid[0] === this.extractedLetters[i]){\n        up = this.extractedLetters[i-1] + uid[1];\n        break;\n      }\n    }\n\n    let down;\n    for(let i = 0; i < this.extractedLetters.length; i++){\n      if(uid[0] === this.extractedLetters[this.extractedLetters.length-1]){\n        down = null;\n        break;\n      }\n      if(uid[0] === this.extractedLetters[i]){\n        down = this.extractedLetters[i+1] + uid[1];\n        break;\n      }\n    }\n\n    let left;\n    for(let i = 0; i < this.extractedLetters.length; i++){\n      if(uid[1] === \"1\"){\n        left = null;\n        break;\n      } else {\n        left = uid[0] + (uid[1] - 1);\n        break;\n      }\n    }\n\n    let right;\n    for(let i = 0; i < this.extractedLetters.length; i++){\n      if(uid[1] === this.extractedNums[this.extractedNums.length-1]){\n        right = null;\n        break;\n      } else {\n        right = uid[0] + (parseInt(uid[1]) + 1);\n        break;\n      }\n    }\n\n    return {up,right,down,left}\n  }\n\n  toggleLights = (uid) => {\n\n    let coordinates = this.lightCoordinates(uid);\n\n  }\n\n\n\n  render() {\n    return(\n      <div>\n        <h1 onClick={() => console.log(this.lightCoordinates(\"b2\"))}>Lights Out</h1>\n        <table className=\"Board-grid\">\n          <tbody>\n            <tr>\n              {this.generateCells(\"a\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"b\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"c\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"d\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"e\")}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}