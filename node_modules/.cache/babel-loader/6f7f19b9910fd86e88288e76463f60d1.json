{"ast":null,"code":"import _toConsumableArray from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Board)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      win: false,\n      cellState: {}\n    };\n    _this.cellList = new Set();\n    _this.extractedLetters = new Set();\n    _this.extractedNums = new Set();\n\n    _this.extractLetters = function () {\n      _this.cellList.forEach(function (cell) {\n        // Loop through the 'cellList',\n        _this.extractedLetters.add(cell[0]); // & add a letter to the 'extractedLetters' Set,\n\n\n        _this.extractedNums.add(cell[1]); // & add a number to the 'extractedNums' Set\n\n      });\n    };\n\n    _this.generateCoordinates = function (uid) {\n      _this.extractLetters();\n\n      var extractedLetters = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n\n      var extractedNums = _toConsumableArray(_this.extractedNums);\n\n      var coords = {};\n      var up;\n\n      for (var i = 0; i < extractedLetters.length; i++) {\n        if (uid[0] === extractedLetters[0]) {\n          console.log(\"up broke 0\");\n          break;\n        } else if (uid[0] === extractedLetters[i]) {\n          up = extractedLetters[i - 1] + uid[1];\n          coords.up = up;\n          console.log(\"up broke 1\");\n          break;\n        }\n      }\n\n      var down;\n\n      for (var _i = 0; _i < extractedLetters.length; _i++) {\n        if (uid[0] !== extractedLetters[extractedLetters.length - 1] && uid[0] === extractedLetters[_i]) {\n          down = extractedLetters[_i + 1] + uid[1];\n          coords.down = down;\n          break;\n        }\n      }\n\n      var left;\n\n      for (var _i2 = 0; _i2 < extractedLetters.length; _i2++) {\n        if (uid[1] !== \"1\") {\n          left = uid[0] + (uid[1] - 1);\n          coords.left = left;\n          break;\n        }\n      }\n\n      var right;\n\n      for (var _i3 = 0; _i3 < extractedLetters.length; _i3++) {\n        if (uid[1] !== extractedNums[extractedNums.length - 1]) {\n          right = uid[0] + (parseInt(uid[1]) + 1);\n          coords.right = right;\n          break;\n        }\n      }\n\n      return coords;\n    };\n\n    _this.generateCells = function (char) {\n      return _toConsumableArray(Array(5)).map(function (x, i) {\n        var id = char + (i + 1);\n\n        _this.cellList.add(id);\n\n        return React.createElement(Cell, {\n          toggle: _this.toggleCells,\n          coords: _this.generateCoordinates(id),\n          id: id,\n          key: id,\n          on: _this.state.cellState[id],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        });\n      });\n    };\n\n    _this.toggleCells = function (cell, coords) {\n      /* Change the state of cellState: */\n      _this.setState(function (st) {\n        st.cellState[cell] = !st.cellState[cell]; // Main Cell\n\n        st.cellState[coords.up] = !st.cellState[coords.up]; // Up Cell\n\n        st.cellState[coords.right] = !st.cellState[coords.right]; // Right Cell\n\n        st.cellState[coords.down] = !st.cellState[coords.down]; // Down Cell\n\n        st.cellState[coords.left] = !st.cellState[coords.left]; // Left Cell\n\n        return st;\n      });\n\n      _this.checkWin();\n    };\n\n    _this.checkWin = function () {\n      var cellList = _toConsumableArray(_this.cellList);\n\n      var won = false;\n\n      _this.setState(function (st) {});\n    };\n\n    _this.componentDidMount = function () {\n      /* Randomize the state of cells on initialization */\n      _this.setState(function (st) {\n        _this.cellList.forEach(function (cell) {\n          var random = Math.floor(Math.random() * 2);\n          st.cellState[cell] = random ? true : false;\n          return st;\n        });\n      });\n\n      _this.forceUpdate();\n    };\n\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        onClick: function onClick() {\n          return console.log(_this2.coords);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Lights Out\"), React.createElement(\"table\", {\n        className: \"Board-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.generateCells(\"a\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.generateCells(\"b\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, this.generateCells(\"c\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.generateCells(\"d\")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.generateCells(\"e\")))));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/shiraz/Documents/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","state","win","cellState","cellList","Set","extractedLetters","extractedNums","extractLetters","forEach","cell","add","generateCoordinates","uid","coords","up","i","length","console","log","down","left","right","parseInt","generateCells","char","Array","map","x","id","toggleCells","setState","st","checkWin","won","componentDidMount","random","Math","floor","forceUpdate"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  state = {\n    win: false,\n    cellState: {}\n  }\n\n  cellList = new Set();\n  extractedLetters = new Set();\n  extractedNums = new Set();\n\n\n  extractLetters = () => {\n    \n    this.cellList.forEach((cell) => { // Loop through the 'cellList',\n      this.extractedLetters.add(cell[0]); // & add a letter to the 'extractedLetters' Set,\n      this.extractedNums.add(cell[1]); // & add a number to the 'extractedNums' Set\n    });\n\n  }\n\n  generateCoordinates = (uid) => {\n\n    this.extractLetters();\n\n    let extractedLetters = [\"a\",\"b\",\"c\",\"d\",\"e\"];\n    let extractedNums = [...this.extractedNums];\n    let coords = {};\n\n    let up;\n    for(let i = 0; i < extractedLetters.length; i++){\n      if(uid[0] === extractedLetters[0]){\n        console.log(\"up broke 0\")\n        break;\n      }\n      else if(uid[0] === extractedLetters[i]){\n        up = extractedLetters[i-1] + uid[1];\n        coords.up = up;\n        console.log(\"up broke 1\")\n        break;\n      }\n    }\n\n    let down;\n    for(let i = 0; i < extractedLetters.length; i++){\n      if(uid[0] !== extractedLetters[extractedLetters.length-1] && uid[0] === extractedLetters[i]){\n        down = extractedLetters[i+1] + uid[1];\n        coords.down = down;\n        break;\n      }\n    }\n\n    let left;\n    for(let i = 0; i < extractedLetters.length; i++){\n      if(uid[1] !== \"1\"){\n        left = uid[0] + (uid[1] - 1);\n        coords.left = left;\n        break;\n      }\n    }\n\n    let right;\n    for(let i = 0; i < extractedLetters.length; i++){\n      if(uid[1] !== extractedNums[extractedNums.length-1]){\n        right = uid[0] + (parseInt(uid[1]) + 1);\n        coords.right = right;\n        break;\n      }\n    }\n\n    return coords\n  }\n\n  generateCells = (char) => {\n    return [...Array(5)].map((x,i) => {\n      let id = char + (i + 1);\n      this.cellList.add(id);\n      return <Cell toggle={this.toggleCells} coords={this.generateCoordinates(id)} id={id} key={id} on={this.state.cellState[id]} />\n    });\n    \n  }\n\n  toggleCells = (cell,coords) => {\n    /* Change the state of cellState: */\n    this.setState(st => {\n      st.cellState[cell] = !st.cellState[cell]; // Main Cell\n      st.cellState[coords.up] = !st.cellState[coords.up]; // Up Cell\n      st.cellState[coords.right] = !st.cellState[coords.right]; // Right Cell\n      st.cellState[coords.down] = !st.cellState[coords.down]; // Down Cell\n      st.cellState[coords.left] = !st.cellState[coords.left]; // Left Cell\n      return st\n    });\n\n    this.checkWin();\n  }\n\n  checkWin = () => {\n    let cellList = [...this.cellList];\n    let won = false;\n    this.setState(st => {\n\n    });\n    \n  }\n\n  componentDidMount = () => {\n    /* Randomize the state of cells on initialization */\n    this.setState((st) => {\n      this.cellList.forEach((cell) => {\n        let random = Math.floor(Math.random() * 2);\n        st.cellState[cell] = (random ? true : false);\n        return st\n      });\n    });\n    this.forceUpdate();\n  }\n\n  render() {\n    return(\n      <div>\n        <h1 onClick={() => console.log(this.coords)}>Lights Out</h1>\n        <table className=\"Board-grid\">\n          <tbody>\n            <tr>\n              {this.generateCells(\"a\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"b\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"c\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"d\")}\n            </tr>\n            <tr>\n              {this.generateCells(\"e\")}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}